/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.keyko.monitoring.schemas;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TransactionDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -349061294898434206L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionDetails\",\"namespace\":\"io.keyko.monitoring.schemas\",\"fields\":[{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nonce\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"blockNumber\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"blockHash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transactionIndex\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"from\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"to\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"nodeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"contractAddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"input\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"revertReason\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionStatus\",\"symbols\":[\"UNCONFIRMED\",\"CONFIRMED\",\"INVALIDATED\",\"FAILED\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionDetails> ENCODER =
      new BinaryMessageEncoder<TransactionDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionDetails> DECODER =
      new BinaryMessageDecoder<TransactionDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TransactionDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TransactionDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TransactionDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TransactionDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TransactionDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TransactionDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TransactionDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String hash;
  @Deprecated public String nonce;
  @Deprecated public String blockNumber;
  @Deprecated public String blockHash;
  @Deprecated public String transactionIndex;
  @Deprecated public String from;
  @Deprecated public String to;
  @Deprecated public String value;
  @Deprecated public String nodeName;
  @Deprecated public String contractAddress;
  @Deprecated public String input;
  @Deprecated public String revertReason;
  @Deprecated public io.keyko.monitoring.schemas.TransactionStatus status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionDetails() {}

  /**
   * All-args constructor.
   * @param hash The new value for hash
   * @param nonce The new value for nonce
   * @param blockNumber The new value for blockNumber
   * @param blockHash The new value for blockHash
   * @param transactionIndex The new value for transactionIndex
   * @param from The new value for from
   * @param to The new value for to
   * @param value The new value for value
   * @param nodeName The new value for nodeName
   * @param contractAddress The new value for contractAddress
   * @param input The new value for input
   * @param revertReason The new value for revertReason
   * @param status The new value for status
   */
  public TransactionDetails(String hash, String nonce, String blockNumber, String blockHash, String transactionIndex, String from, String to, String value, String nodeName, String contractAddress, String input, String revertReason, io.keyko.monitoring.schemas.TransactionStatus status) {
    this.hash = hash;
    this.nonce = nonce;
    this.blockNumber = blockNumber;
    this.blockHash = blockHash;
    this.transactionIndex = transactionIndex;
    this.from = from;
    this.to = to;
    this.value = value;
    this.nodeName = nodeName;
    this.contractAddress = contractAddress;
    this.input = input;
    this.revertReason = revertReason;
    this.status = status;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return hash;
    case 1: return nonce;
    case 2: return blockNumber;
    case 3: return blockHash;
    case 4: return transactionIndex;
    case 5: return from;
    case 6: return to;
    case 7: return value;
    case 8: return nodeName;
    case 9: return contractAddress;
    case 10: return input;
    case 11: return revertReason;
    case 12: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: hash = (String)value$; break;
    case 1: nonce = (String)value$; break;
    case 2: blockNumber = (String)value$; break;
    case 3: blockHash = (String)value$; break;
    case 4: transactionIndex = (String)value$; break;
    case 5: from = (String)value$; break;
    case 6: to = (String)value$; break;
    case 7: value = (String)value$; break;
    case 8: nodeName = (String)value$; break;
    case 9: contractAddress = (String)value$; break;
    case 10: input = (String)value$; break;
    case 11: revertReason = (String)value$; break;
    case 12: status = (io.keyko.monitoring.schemas.TransactionStatus)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public String getHash() {
    return hash;
  }


  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(String value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return The value of the 'nonce' field.
   */
  public String getNonce() {
    return nonce;
  }


  /**
   * Sets the value of the 'nonce' field.
   * @param value the value to set.
   */
  public void setNonce(String value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'blockNumber' field.
   * @return The value of the 'blockNumber' field.
   */
  public String getBlockNumber() {
    return blockNumber;
  }


  /**
   * Sets the value of the 'blockNumber' field.
   * @param value the value to set.
   */
  public void setBlockNumber(String value) {
    this.blockNumber = value;
  }

  /**
   * Gets the value of the 'blockHash' field.
   * @return The value of the 'blockHash' field.
   */
  public String getBlockHash() {
    return blockHash;
  }


  /**
   * Sets the value of the 'blockHash' field.
   * @param value the value to set.
   */
  public void setBlockHash(String value) {
    this.blockHash = value;
  }

  /**
   * Gets the value of the 'transactionIndex' field.
   * @return The value of the 'transactionIndex' field.
   */
  public String getTransactionIndex() {
    return transactionIndex;
  }


  /**
   * Sets the value of the 'transactionIndex' field.
   * @param value the value to set.
   */
  public void setTransactionIndex(String value) {
    this.transactionIndex = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public String getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(String value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public String getTo() {
    return to;
  }


  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(String value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public String getValue() {
    return value;
  }


  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(String value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'nodeName' field.
   * @return The value of the 'nodeName' field.
   */
  public String getNodeName() {
    return nodeName;
  }


  /**
   * Sets the value of the 'nodeName' field.
   * @param value the value to set.
   */
  public void setNodeName(String value) {
    this.nodeName = value;
  }

  /**
   * Gets the value of the 'contractAddress' field.
   * @return The value of the 'contractAddress' field.
   */
  public String getContractAddress() {
    return contractAddress;
  }


  /**
   * Sets the value of the 'contractAddress' field.
   * @param value the value to set.
   */
  public void setContractAddress(String value) {
    this.contractAddress = value;
  }

  /**
   * Gets the value of the 'input' field.
   * @return The value of the 'input' field.
   */
  public String getInput() {
    return input;
  }


  /**
   * Sets the value of the 'input' field.
   * @param value the value to set.
   */
  public void setInput(String value) {
    this.input = value;
  }

  /**
   * Gets the value of the 'revertReason' field.
   * @return The value of the 'revertReason' field.
   */
  public String getRevertReason() {
    return revertReason;
  }


  /**
   * Sets the value of the 'revertReason' field.
   * @param value the value to set.
   */
  public void setRevertReason(String value) {
    this.revertReason = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public io.keyko.monitoring.schemas.TransactionStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(io.keyko.monitoring.schemas.TransactionStatus value) {
    this.status = value;
  }

  /**
   * Creates a new TransactionDetails RecordBuilder.
   * @return A new TransactionDetails RecordBuilder
   */
  public static io.keyko.monitoring.schemas.TransactionDetails.Builder newBuilder() {
    return new io.keyko.monitoring.schemas.TransactionDetails.Builder();
  }

  /**
   * Creates a new TransactionDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionDetails RecordBuilder
   */
  public static io.keyko.monitoring.schemas.TransactionDetails.Builder newBuilder(io.keyko.monitoring.schemas.TransactionDetails.Builder other) {
    if (other == null) {
      return new io.keyko.monitoring.schemas.TransactionDetails.Builder();
    } else {
      return new io.keyko.monitoring.schemas.TransactionDetails.Builder(other);
    }
  }

  /**
   * Creates a new TransactionDetails RecordBuilder by copying an existing TransactionDetails instance.
   * @param other The existing instance to copy.
   * @return A new TransactionDetails RecordBuilder
   */
  public static io.keyko.monitoring.schemas.TransactionDetails.Builder newBuilder(io.keyko.monitoring.schemas.TransactionDetails other) {
    if (other == null) {
      return new io.keyko.monitoring.schemas.TransactionDetails.Builder();
    } else {
      return new io.keyko.monitoring.schemas.TransactionDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for TransactionDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionDetails>
    implements org.apache.avro.data.RecordBuilder<TransactionDetails> {

    private String hash;
    private String nonce;
    private String blockNumber;
    private String blockHash;
    private String transactionIndex;
    private String from;
    private String to;
    private String value;
    private String nodeName;
    private String contractAddress;
    private String input;
    private String revertReason;
    private io.keyko.monitoring.schemas.TransactionStatus status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.keyko.monitoring.schemas.TransactionDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[2].schema(), other.blockNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.blockHash)) {
        this.blockHash = data().deepCopy(fields()[3].schema(), other.blockHash);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.transactionIndex)) {
        this.transactionIndex = data().deepCopy(fields()[4].schema(), other.transactionIndex);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.from)) {
        this.from = data().deepCopy(fields()[5].schema(), other.from);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.to)) {
        this.to = data().deepCopy(fields()[6].schema(), other.to);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.value)) {
        this.value = data().deepCopy(fields()[7].schema(), other.value);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.nodeName)) {
        this.nodeName = data().deepCopy(fields()[8].schema(), other.nodeName);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[9].schema(), other.contractAddress);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.input)) {
        this.input = data().deepCopy(fields()[10].schema(), other.input);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.revertReason)) {
        this.revertReason = data().deepCopy(fields()[11].schema(), other.revertReason);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(io.keyko.monitoring.schemas.TransactionDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.hash)) {
        this.hash = data().deepCopy(fields()[0].schema(), other.hash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.blockNumber)) {
        this.blockNumber = data().deepCopy(fields()[2].schema(), other.blockNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.blockHash)) {
        this.blockHash = data().deepCopy(fields()[3].schema(), other.blockHash);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transactionIndex)) {
        this.transactionIndex = data().deepCopy(fields()[4].schema(), other.transactionIndex);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.from)) {
        this.from = data().deepCopy(fields()[5].schema(), other.from);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.to)) {
        this.to = data().deepCopy(fields()[6].schema(), other.to);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.value)) {
        this.value = data().deepCopy(fields()[7].schema(), other.value);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.nodeName)) {
        this.nodeName = data().deepCopy(fields()[8].schema(), other.nodeName);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.contractAddress)) {
        this.contractAddress = data().deepCopy(fields()[9].schema(), other.contractAddress);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.input)) {
        this.input = data().deepCopy(fields()[10].schema(), other.input);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.revertReason)) {
        this.revertReason = data().deepCopy(fields()[11].schema(), other.revertReason);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.status)) {
        this.status = data().deepCopy(fields()[12].schema(), other.status);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'hash' field.
      * @return The value.
      */
    public String getHash() {
      return hash;
    }


    /**
      * Sets the value of the 'hash' field.
      * @param value The value of 'hash'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setHash(String value) {
      validate(fields()[0], value);
      this.hash = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hash' field has been set.
      * @return True if the 'hash' field has been set, false otherwise.
      */
    public boolean hasHash() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hash' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearHash() {
      hash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * @return The value.
      */
    public String getNonce() {
      return nonce;
    }


    /**
      * Sets the value of the 'nonce' field.
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setNonce(String value) {
      validate(fields()[1], value);
      this.nonce = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nonce' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearNonce() {
      nonce = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockNumber' field.
      * @return The value.
      */
    public String getBlockNumber() {
      return blockNumber;
    }


    /**
      * Sets the value of the 'blockNumber' field.
      * @param value The value of 'blockNumber'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setBlockNumber(String value) {
      validate(fields()[2], value);
      this.blockNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'blockNumber' field has been set.
      * @return True if the 'blockNumber' field has been set, false otherwise.
      */
    public boolean hasBlockNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'blockNumber' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearBlockNumber() {
      blockNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'blockHash' field.
      * @return The value.
      */
    public String getBlockHash() {
      return blockHash;
    }


    /**
      * Sets the value of the 'blockHash' field.
      * @param value The value of 'blockHash'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setBlockHash(String value) {
      validate(fields()[3], value);
      this.blockHash = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'blockHash' field has been set.
      * @return True if the 'blockHash' field has been set, false otherwise.
      */
    public boolean hasBlockHash() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'blockHash' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearBlockHash() {
      blockHash = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionIndex' field.
      * @return The value.
      */
    public String getTransactionIndex() {
      return transactionIndex;
    }


    /**
      * Sets the value of the 'transactionIndex' field.
      * @param value The value of 'transactionIndex'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setTransactionIndex(String value) {
      validate(fields()[4], value);
      this.transactionIndex = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionIndex' field has been set.
      * @return True if the 'transactionIndex' field has been set, false otherwise.
      */
    public boolean hasTransactionIndex() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transactionIndex' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearTransactionIndex() {
      transactionIndex = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public String getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setFrom(String value) {
      validate(fields()[5], value);
      this.from = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearFrom() {
      from = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public String getTo() {
      return to;
    }


    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setTo(String value) {
      validate(fields()[6], value);
      this.to = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearTo() {
      to = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public String getValue() {
      return value;
    }


    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setValue(String value) {
      validate(fields()[7], value);
      this.value = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearValue() {
      value = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'nodeName' field.
      * @return The value.
      */
    public String getNodeName() {
      return nodeName;
    }


    /**
      * Sets the value of the 'nodeName' field.
      * @param value The value of 'nodeName'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setNodeName(String value) {
      validate(fields()[8], value);
      this.nodeName = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'nodeName' field has been set.
      * @return True if the 'nodeName' field has been set, false otherwise.
      */
    public boolean hasNodeName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'nodeName' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearNodeName() {
      nodeName = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'contractAddress' field.
      * @return The value.
      */
    public String getContractAddress() {
      return contractAddress;
    }


    /**
      * Sets the value of the 'contractAddress' field.
      * @param value The value of 'contractAddress'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setContractAddress(String value) {
      validate(fields()[9], value);
      this.contractAddress = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'contractAddress' field has been set.
      * @return True if the 'contractAddress' field has been set, false otherwise.
      */
    public boolean hasContractAddress() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'contractAddress' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearContractAddress() {
      contractAddress = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'input' field.
      * @return The value.
      */
    public String getInput() {
      return input;
    }


    /**
      * Sets the value of the 'input' field.
      * @param value The value of 'input'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setInput(String value) {
      validate(fields()[10], value);
      this.input = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'input' field has been set.
      * @return True if the 'input' field has been set, false otherwise.
      */
    public boolean hasInput() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'input' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearInput() {
      input = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'revertReason' field.
      * @return The value.
      */
    public String getRevertReason() {
      return revertReason;
    }


    /**
      * Sets the value of the 'revertReason' field.
      * @param value The value of 'revertReason'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setRevertReason(String value) {
      validate(fields()[11], value);
      this.revertReason = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'revertReason' field has been set.
      * @return True if the 'revertReason' field has been set, false otherwise.
      */
    public boolean hasRevertReason() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'revertReason' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearRevertReason() {
      revertReason = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public io.keyko.monitoring.schemas.TransactionStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder setStatus(io.keyko.monitoring.schemas.TransactionStatus value) {
      validate(fields()[12], value);
      this.status = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.TransactionDetails.Builder clearStatus() {
      status = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionDetails build() {
      try {
        TransactionDetails record = new TransactionDetails();
        record.hash = fieldSetFlags()[0] ? this.hash : (String) defaultValue(fields()[0]);
        record.nonce = fieldSetFlags()[1] ? this.nonce : (String) defaultValue(fields()[1]);
        record.blockNumber = fieldSetFlags()[2] ? this.blockNumber : (String) defaultValue(fields()[2]);
        record.blockHash = fieldSetFlags()[3] ? this.blockHash : (String) defaultValue(fields()[3]);
        record.transactionIndex = fieldSetFlags()[4] ? this.transactionIndex : (String) defaultValue(fields()[4]);
        record.from = fieldSetFlags()[5] ? this.from : (String) defaultValue(fields()[5]);
        record.to = fieldSetFlags()[6] ? this.to : (String) defaultValue(fields()[6]);
        record.value = fieldSetFlags()[7] ? this.value : (String) defaultValue(fields()[7]);
        record.nodeName = fieldSetFlags()[8] ? this.nodeName : (String) defaultValue(fields()[8]);
        record.contractAddress = fieldSetFlags()[9] ? this.contractAddress : (String) defaultValue(fields()[9]);
        record.input = fieldSetFlags()[10] ? this.input : (String) defaultValue(fields()[10]);
        record.revertReason = fieldSetFlags()[11] ? this.revertReason : (String) defaultValue(fields()[11]);
        record.status = fieldSetFlags()[12] ? this.status : (io.keyko.monitoring.schemas.TransactionStatus) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionDetails>
    READER$ = (org.apache.avro.io.DatumReader<TransactionDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.hash);

    out.writeString(this.nonce);

    out.writeString(this.blockNumber);

    out.writeString(this.blockHash);

    out.writeString(this.transactionIndex);

    out.writeString(this.from);

    out.writeString(this.to);

    out.writeString(this.value);

    out.writeString(this.nodeName);

    out.writeString(this.contractAddress);

    out.writeString(this.input);

    out.writeString(this.revertReason);

    out.writeEnum(this.status.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.hash = in.readString();

      this.nonce = in.readString();

      this.blockNumber = in.readString();

      this.blockHash = in.readString();

      this.transactionIndex = in.readString();

      this.from = in.readString();

      this.to = in.readString();

      this.value = in.readString();

      this.nodeName = in.readString();

      this.contractAddress = in.readString();

      this.input = in.readString();

      this.revertReason = in.readString();

      this.status = io.keyko.monitoring.schemas.TransactionStatus.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.hash = in.readString();
          break;

        case 1:
          this.nonce = in.readString();
          break;

        case 2:
          this.blockNumber = in.readString();
          break;

        case 3:
          this.blockHash = in.readString();
          break;

        case 4:
          this.transactionIndex = in.readString();
          break;

        case 5:
          this.from = in.readString();
          break;

        case 6:
          this.to = in.readString();
          break;

        case 7:
          this.value = in.readString();
          break;

        case 8:
          this.nodeName = in.readString();
          break;

        case 9:
          this.contractAddress = in.readString();
          break;

        case 10:
          this.input = in.readString();
          break;

        case 11:
          this.revertReason = in.readString();
          break;

        case 12:
          this.status = io.keyko.monitoring.schemas.TransactionStatus.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










