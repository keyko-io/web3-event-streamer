/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.keyko.monitoring.schemas;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AlertEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -202773870068325002L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlertEvent\",\"namespace\":\"io.keyko.monitoring.schemas\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"reference\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"status\",\"type\":{\"type\":\"enum\",\"name\":\"AlertEventStatus\",\"symbols\":[\"FATAL\",\"ERROR\",\"WARNING\",\"INFO\",\"DEBUG\"]}},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"java-class\":\"java.math.BigInteger\"},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AlertEvent> ENCODER =
      new BinaryMessageEncoder<AlertEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AlertEvent> DECODER =
      new BinaryMessageDecoder<AlertEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AlertEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AlertEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AlertEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AlertEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AlertEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AlertEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AlertEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AlertEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public String name;
  @Deprecated public String reference;
  @Deprecated public io.keyko.monitoring.schemas.AlertEventStatus status;
  @Deprecated public String timestamp;
  @Deprecated public String description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlertEvent() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param reference The new value for reference
   * @param status The new value for status
   * @param timestamp The new value for timestamp
   * @param description The new value for description
   */
  public AlertEvent(String name, String reference, io.keyko.monitoring.schemas.AlertEventStatus status, String timestamp, String description) {
    this.name = name;
    this.reference = reference;
    this.status = status;
    this.timestamp = timestamp;
    this.description = description;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return reference;
    case 2: return status;
    case 3: return timestamp;
    case 4: return description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: name = (String)value$; break;
    case 1: reference = (String)value$; break;
    case 2: status = (io.keyko.monitoring.schemas.AlertEventStatus)value$; break;
    case 3: timestamp = (String)value$; break;
    case 4: description = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'reference' field.
   * @return The value of the 'reference' field.
   */
  public String getReference() {
    return reference;
  }


  /**
   * Sets the value of the 'reference' field.
   * @param value the value to set.
   */
  public void setReference(String value) {
    this.reference = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public io.keyko.monitoring.schemas.AlertEventStatus getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(io.keyko.monitoring.schemas.AlertEventStatus value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public String getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(String value) {
    this.description = value;
  }

  /**
   * Creates a new AlertEvent RecordBuilder.
   * @return A new AlertEvent RecordBuilder
   */
  public static io.keyko.monitoring.schemas.AlertEvent.Builder newBuilder() {
    return new io.keyko.monitoring.schemas.AlertEvent.Builder();
  }

  /**
   * Creates a new AlertEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlertEvent RecordBuilder
   */
  public static io.keyko.monitoring.schemas.AlertEvent.Builder newBuilder(io.keyko.monitoring.schemas.AlertEvent.Builder other) {
    if (other == null) {
      return new io.keyko.monitoring.schemas.AlertEvent.Builder();
    } else {
      return new io.keyko.monitoring.schemas.AlertEvent.Builder(other);
    }
  }

  /**
   * Creates a new AlertEvent RecordBuilder by copying an existing AlertEvent instance.
   * @param other The existing instance to copy.
   * @return A new AlertEvent RecordBuilder
   */
  public static io.keyko.monitoring.schemas.AlertEvent.Builder newBuilder(io.keyko.monitoring.schemas.AlertEvent other) {
    if (other == null) {
      return new io.keyko.monitoring.schemas.AlertEvent.Builder();
    } else {
      return new io.keyko.monitoring.schemas.AlertEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AlertEvent instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlertEvent>
    implements org.apache.avro.data.RecordBuilder<AlertEvent> {

    private String name;
    private String reference;
    private io.keyko.monitoring.schemas.AlertEventStatus status;
    private String timestamp;
    private String description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.keyko.monitoring.schemas.AlertEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.reference)) {
        this.reference = data().deepCopy(fields()[1].schema(), other.reference);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing AlertEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(io.keyko.monitoring.schemas.AlertEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.reference)) {
        this.reference = data().deepCopy(fields()[1].schema(), other.reference);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.status)) {
        this.status = data().deepCopy(fields()[2].schema(), other.status);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.description)) {
        this.description = data().deepCopy(fields()[4].schema(), other.description);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder setName(String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'reference' field.
      * @return The value.
      */
    public String getReference() {
      return reference;
    }


    /**
      * Sets the value of the 'reference' field.
      * @param value The value of 'reference'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder setReference(String value) {
      validate(fields()[1], value);
      this.reference = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'reference' field has been set.
      * @return True if the 'reference' field has been set, false otherwise.
      */
    public boolean hasReference() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'reference' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder clearReference() {
      reference = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public io.keyko.monitoring.schemas.AlertEventStatus getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder setStatus(io.keyko.monitoring.schemas.AlertEventStatus value) {
      validate(fields()[2], value);
      this.status = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder clearStatus() {
      status = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public String getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder setTimestamp(String value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder setDescription(String value) {
      validate(fields()[4], value);
      this.description = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public io.keyko.monitoring.schemas.AlertEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AlertEvent build() {
      try {
        AlertEvent record = new AlertEvent();
        record.name = fieldSetFlags()[0] ? this.name : (String) defaultValue(fields()[0]);
        record.reference = fieldSetFlags()[1] ? this.reference : (String) defaultValue(fields()[1]);
        record.status = fieldSetFlags()[2] ? this.status : (io.keyko.monitoring.schemas.AlertEventStatus) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (String) defaultValue(fields()[3]);
        record.description = fieldSetFlags()[4] ? this.description : (String) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AlertEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AlertEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AlertEvent>
    READER$ = (org.apache.avro.io.DatumReader<AlertEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.reference);

    out.writeEnum(this.status.ordinal());

    out.writeString(this.timestamp);

    out.writeString(this.description);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString();

      this.reference = in.readString();

      this.status = io.keyko.monitoring.schemas.AlertEventStatus.values()[in.readEnum()];

      this.timestamp = in.readString();

      this.description = in.readString();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString();
          break;

        case 1:
          this.reference = in.readString();
          break;

        case 2:
          this.status = io.keyko.monitoring.schemas.AlertEventStatus.values()[in.readEnum()];
          break;

        case 3:
          this.timestamp = in.readString();
          break;

        case 4:
          this.description = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










