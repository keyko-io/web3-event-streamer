package io.keyko.monitoring.stream;

import io.keyko.monitoring.schemas.BlockEvent;
import io.keyko.monitoring.schemas.ContractEvent;
import io.keyko.monitoring.schemas.EventBlock;
import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.kstream.Joined;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Produced;


public class EventProcessor {

  /**
   * Filter the events that has been already confirmed.
   *
   * @param contractEvents KStream with the event from the topic contract-events generated by Eventeum
   * @return KStream with the events that have been confirmed.
   */
  public KStream<String, ContractEvent> filterConfirmed(KStream<String, ContractEvent> contractEvents) {
    return contractEvents
      .filter((key, event) -> event.getDetails().getStatus().toString().equalsIgnoreCase("CONFIRMED"));
  }

  /**
   * Sending confirmed events to a topic corresponding with the name of the event.
   *
   * @param confirmedEvents Stream with the confirmed events
   */
  public void splitTopics(KStream<String, EventBlock> confirmedEvents, Serde<EventBlock> eventBlockAvroSerde) {
    confirmedEvents.to((key, value, recordContext) ->
        value.getDetails().getName().toLowerCase(),
      Produced.with(Serdes.String(), eventBlockAvroSerde)
    );
  }

  /**
   * Join the events with the corresponding block to track the timestamp of mining.
   *
   * @param eventAvroStream Stream with the confirmed events
   * @param blockAvroStream Table with the blocks
   * @return KStream
   */
  public KStream<String, EventBlock> joinEventWithBlock(KStream<String, ContractEvent> eventAvroStream, KTable<String, BlockEvent> blockAvroStream,
                                                        Serde<ContractEvent> eventAvroSerde, Serde<BlockEvent> blockAvroSerde) {
    return eventAvroStream
      .selectKey((key, event) -> event.getDetails().getBlockHash())
      .join(blockAvroStream,
        (event, block) -> {
          EventBlock eventblock = new EventBlock();

          eventblock.setDetails(event.getDetails());
          eventblock.setDetailsBlock(block.getDetails());
          eventblock.setId(event.getId());
          eventblock.setRetries(event.getRetries());
          eventblock.setType(event.getType());

          return eventblock;
        },
        Joined.with(Serdes.String(), eventAvroSerde, blockAvroSerde)
      )
      .selectKey((key, event) -> event.getId());
  }

}
