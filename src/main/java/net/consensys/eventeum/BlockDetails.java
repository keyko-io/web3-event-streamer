/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package net.consensys.eventeum;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class BlockDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6934724161586224901L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BlockDetails\",\"namespace\":\"net.consensys.eventeum\",\"fields\":[{\"name\":\"number\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"java-class\":\"java.math.BigInteger\"},{\"name\":\"hash\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"java-class\":\"java.math.BigInteger\"},{\"name\":\"nodeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BlockDetails> ENCODER =
    new BinaryMessageEncoder<BlockDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BlockDetails> DECODER =
    new BinaryMessageDecoder<BlockDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BlockDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BlockDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BlockDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BlockDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BlockDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BlockDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BlockDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BlockDetails fromByteBuffer(
    java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated
  public String number;
  @Deprecated
  public String hash;
  @Deprecated
  public String timestamp;
  @Deprecated
  public String nodeName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BlockDetails() {
  }

  /**
   * All-args constructor.
   * @param number The new value for number
   * @param hash The new value for hash
   * @param timestamp The new value for timestamp
   * @param nodeName The new value for nodeName
   */
  public BlockDetails(String number, String hash, String timestamp, String nodeName) {
    this.number = number;
    this.hash = hash;
    this.timestamp = timestamp;
    this.nodeName = nodeName;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
      case 0:
        return number;
      case 1:
        return hash;
      case 2:
        return timestamp;
      case 3:
        return nodeName;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
      case 0:
        number = (String) value$;
        break;
      case 1:
        hash = (String) value$;
        break;
      case 2:
        timestamp = (String) value$;
        break;
      case 3:
        nodeName = (String) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'number' field.
   * @return The value of the 'number' field.
   */
  public String getNumber() {
    return number;
  }


  /**
   * Sets the value of the 'number' field.
   * @param value the value to set.
   */
  public void setNumber(String value) {
    this.number = value;
  }

  /**
   * Gets the value of the 'hash' field.
   * @return The value of the 'hash' field.
   */
  public String getHash() {
    return hash;
  }


  /**
   * Sets the value of the 'hash' field.
   * @param value the value to set.
   */
  public void setHash(String value) {
    this.hash = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public String getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(String value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'nodeName' field.
   * @return The value of the 'nodeName' field.
   */
  public String getNodeName() {
    return nodeName;
  }


  /**
   * Sets the value of the 'nodeName' field.
   * @param value the value to set.
   */
  public void setNodeName(String value) {
    this.nodeName = value;
  }

  /**
   * Creates a new BlockDetails RecordBuilder.
   * @return A new BlockDetails RecordBuilder
   */
  public static net.consensys.eventeum.BlockDetails.Builder newBuilder() {
    return new net.consensys.eventeum.BlockDetails.Builder();
  }

  /**
   * Creates a new BlockDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BlockDetails RecordBuilder
   */
  public static net.consensys.eventeum.BlockDetails.Builder newBuilder(net.consensys.eventeum.BlockDetails.Builder other) {
    if (other == null) {
      return new net.consensys.eventeum.BlockDetails.Builder();
    } else {
      return new net.consensys.eventeum.BlockDetails.Builder(other);
    }
  }

  /**
   * Creates a new BlockDetails RecordBuilder by copying an existing BlockDetails instance.
   * @param other The existing instance to copy.
   * @return A new BlockDetails RecordBuilder
   */
  public static net.consensys.eventeum.BlockDetails.Builder newBuilder(net.consensys.eventeum.BlockDetails other) {
    if (other == null) {
      return new net.consensys.eventeum.BlockDetails.Builder();
    } else {
      return new net.consensys.eventeum.BlockDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for BlockDetails instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BlockDetails>
    implements org.apache.avro.data.RecordBuilder<BlockDetails> {

    private String number;
    private String hash;
    private String timestamp;
    private String nodeName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.consensys.eventeum.BlockDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nodeName)) {
        this.nodeName = data().deepCopy(fields()[3].schema(), other.nodeName);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing BlockDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(net.consensys.eventeum.BlockDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.number)) {
        this.number = data().deepCopy(fields()[0].schema(), other.number);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hash)) {
        this.hash = data().deepCopy(fields()[1].schema(), other.hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nodeName)) {
        this.nodeName = data().deepCopy(fields()[3].schema(), other.nodeName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Gets the value of the 'number' field.
     * @return The value.
     */
    public String getNumber() {
      return number;
    }


    /**
     * Sets the value of the 'number' field.
     * @param value The value of 'number'.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder setNumber(String value) {
      validate(fields()[0], value);
      this.number = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'number' field has been set.
     * @return True if the 'number' field has been set, false otherwise.
     */
    public boolean hasNumber() {
      return fieldSetFlags()[0];
    }


    /**
     * Clears the value of the 'number' field.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder clearNumber() {
      number = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'hash' field.
     * @return The value.
     */
    public String getHash() {
      return hash;
    }


    /**
     * Sets the value of the 'hash' field.
     * @param value The value of 'hash'.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder setHash(String value) {
      validate(fields()[1], value);
      this.hash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'hash' field has been set.
     * @return True if the 'hash' field has been set, false otherwise.
     */
    public boolean hasHash() {
      return fieldSetFlags()[1];
    }


    /**
     * Clears the value of the 'hash' field.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder clearHash() {
      hash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value.
     */
    public String getTimestamp() {
      return timestamp;
    }


    /**
     * Sets the value of the 'timestamp' field.
     * @param value The value of 'timestamp'.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder setTimestamp(String value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'timestamp' field has been set.
     * @return True if the 'timestamp' field has been set, false otherwise.
     */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
     * Clears the value of the 'timestamp' field.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'nodeName' field.
     * @return The value.
     */
    public String getNodeName() {
      return nodeName;
    }


    /**
     * Sets the value of the 'nodeName' field.
     * @param value The value of 'nodeName'.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder setNodeName(String value) {
      validate(fields()[3], value);
      this.nodeName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'nodeName' field has been set.
     * @return True if the 'nodeName' field has been set, false otherwise.
     */
    public boolean hasNodeName() {
      return fieldSetFlags()[3];
    }


    /**
     * Clears the value of the 'nodeName' field.
     * @return This builder.
     */
    public net.consensys.eventeum.BlockDetails.Builder clearNodeName() {
      nodeName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BlockDetails build() {
      try {
        BlockDetails record = new BlockDetails();
        record.number = fieldSetFlags()[0] ? this.number : (String) defaultValue(fields()[0]);
        record.hash = fieldSetFlags()[1] ? this.hash : (String) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (String) defaultValue(fields()[2]);
        record.nodeName = fieldSetFlags()[3] ? this.nodeName : (String) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BlockDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<BlockDetails>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BlockDetails>
    READER$ = (org.apache.avro.io.DatumReader<BlockDetails>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException {
    out.writeString(this.number);

    out.writeString(this.hash);

    out.writeString(this.timestamp);

    out.writeString(this.nodeName);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.number = in.readString();

      this.hash = in.readString();

      this.timestamp = in.readString();

      this.nodeName = in.readString();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.number = in.readString();
            break;

          case 1:
            this.hash = in.readString();
            break;

          case 2:
            this.timestamp = in.readString();
            break;

          case 3:
            this.nodeName = in.readString();
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










